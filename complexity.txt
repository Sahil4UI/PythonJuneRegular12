Factors affecting Efficiency
-Time 
-Space 

Complexity->It helps in determining the efficiency of Algorithm
->Time Complexity
->space Complexity



Big-O Notation -> O(n),O(n^2) ->Growth rate

For(i in range(1,n+1)):
	Print(i)

->O(n) -> n steps

For i in range(1,n+1):
	For j in range(1,n+1):
		Print(i,j)
		
N->3
i->1,2,3
J->1,2,3

11
12
13

21
22
23

31
32
33
3^2->9
N ->N^2

->O(n^2)
O(1)->1 constant
O(n) ->Linear(n,n)
O(n^2)->quadratic 
O(n^3)->cubic
O(2^n)->exponential


How to find Complexity->
->Assignments/Operation(a=5)
->Input
->Loops
->Conditions


For i in range(n):      ->n
	X = i+1 -> 1step ->c1 0->n*c time
	
	Total time ->. n*c1 ->cn -> O(n)
	
For i in range(1,n+1):
	For j in range(1,n+1):
		X=i+j
		
		
Total no of steps taken by for I in range(1,n+1) ->n
Total No of steps taken by for j in range(1,n+1)->n
Total no of assignment ->1 time -> c

Total time =  n*n*c = cn^2 ->O(n^2)

->

 a =b+c -> c1
For i in range(n): ->n
	M = i+2
For J in range(n):
	For k in range(n):
		N=n+1
		

No of assignments in a=b+c ->1 ->c1
No of steps in For i in range(n): ->n
         Assignment ->1 ->c2

No of steps in For J in range(n): -> n
No of steps in For k  in range(n): -> n
	Assignment->1->c3
	
	Total time = c1 +n*c2+n*n*c3
	=c1+c2n+c3n^2 ->O(n^2)
	
	
List1 = [1,2,3,4,5]->c1
List2=[6,7,8,9,10]->c2
If (len(List1)==len(List2)): ->c3
	return True->c4
else:
	For i in range(n): ->n
		If list1[i] == list2[j]: ->c5
			return True ->c6
			
			Total Time = c1+c2+(c3+c4)+n(c5+c6) ->O(n)

O(1),O(n),O(n^2),O(n^3)â€¦..

Logarithmic Complexity->
O(logN)->n/2

Example -> check whether String is Pallandrome or Not

String1 = "madam"
Reverse = "madam"

String1="madam"
String2=""
For I in range(reversed(len(String1))):
	String2 +=String1[i]
	Total Time->O(n)
